# -*- coding: utf-8 -*-
"""22101617_suchitra barua

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WZUzsJQgR9BTvsufPipvkkFvnZ6pirYn
"""

import random

file_input = open("Input file.txt", "r")

#C=initial chromosomes
#G=generations
C,G = map(int, file_input.readline().strip().split())

capital = float(file_input.readline().strip()) # Capital to Start With
historical_prices = list(map(float, file_input.readline().strip().split()))

# initial population
population = []
for i in range(C):
    sl, tp, ts = map(float, file_input.readline().strip().split())
    population.append({"stop_loss": sl, "take_profit": tp, "trade_size": ts})

file_input.close()


len_of_chromosome = 3
def chromosome():
    return {
        "stop_loss": round(random.uniform(1, 10), 1),
        "take_profit": round(random.uniform(1, 10), 1),
        "trade_size": round(random.uniform(5, 30), 1)
    }

def population_creation(size=G):
    return [chromosome() for i in range(size)]

def parentSelection():
    return random.sample(population, 2)

def crossover():
    parent1, parent2 = parentSelection()
    crossover_point = random.choice(["stop_loss", "take_profit", "trade_size"])

    child1, child2 = parent1.copy(), parent2.copy()
    child1[crossover_point], child2[crossover_point] = parent2[crossover_point], parent1[crossover_point]

    return child1, child2

def mutation(offspring, mutation_prob=0.1):
    mutated_offspring = offspring.copy()

    for gene in ["stop_loss", "take_profit", "trade_size"]:
        if random.random() < mutation_prob:
            if gene == "stop_loss":
                mutated_offspring[gene] += round(random.uniform(-1, 1), 1)
                mutated_offspring[gene] = max(1, min(10, mutated_offspring[gene]))

            elif gene == "take_profit":
                mutated_offspring[gene] += round(random.uniform(-1, 1), 1)
                mutated_offspring[gene] = max(1, min(10, mutated_offspring[gene]))

            else:  # Trade size
                mutated_offspring[gene] += round(random.uniform(-2, 2), 1)
                mutated_offspring[gene] = max(5, min(30, mutated_offspring[gene]))

    return mutated_offspring

def fitness(strategy):
    current_capital=capital
    trade_size=strategy["trade_size"]/100

    for price_change in historical_prices:
        trade_amount=current_capital*trade_size

        # Apply stop-loss
        if price_change<-strategy["stop_loss"]:
            loss=trade_amount*(strategy["stop_loss"]/100)
            current_capital -= loss
        # Apply take-profit
        elif price_change>strategy["take_profit"]:
            profit=trade_amount*(strategy["take_profit"]/100)
            current_capital+=profit
        else:
            # Normal trade gain/loss
            profit_or_loss=trade_amount*(price_change/100)
            current_capital+=profit_or_loss

    return current_capital - capital


best_fitness = []
best_mutation = []

for _ in range(G):
    c1, c2 = crossover()
    fit1 = fitness(c1)
    fit2 = fitness(c2)


    if fit1 > fit2: #offspring
        best_offspring = c1
        best_fit = fit1
    else:
        best_offspring = c2
        best_fit = fit2


    best_mutation.append(best_offspring)
    best_fitness.append(best_fit)
    if best_fit == 0:
        break

max_fit = max(best_fitness)
max_mutation = best_mutation[best_fitness.index(max_fit)]

print(f"best_strategy: {max_mutation}")
print(f"Final Profit: {max_fit}")


# TASK 02:

def twoPointCrossover(parent1, parent2):
    genes = list(parent1.keys())

    cp1, cp2 = sorted(random.sample(range(len(genes)), 2))
    child1, child2 = parent1.copy(), parent2.copy()

    for i in range(cp1, cp2 + 1):
        gene = genes[i]
        child1[gene], child2[gene] = child2[gene], child1[gene]

    return child1, child2

parent1, parent2 = parentSelection()
offspring1, offspring2 = twoPointCrossover(parent1, parent2)

print("Offspring 1 (Two-Point Crossover):", offspring1)
print("Offspring 2 (Two-Point Crossover):", offspring2)